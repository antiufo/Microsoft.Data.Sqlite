use assembly='System.IO.Compression, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'
use assembly='System.Net.Http, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'
use assembly='WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
use namespace='System.IO.Compression'
use namespace='System.IO.Packaging'
use namespace='System.Net.Http'
use namespace='System.IO'

var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

var sqliteDllPath='src/Microsoft.Data.Sqlite/runtimes/win-x86/native/sqlite3.dll'
#sqlite-download target='initialize' if='!File.Exists(sqliteDllPath)'
    @{
        DownloadAndExtract(
            "https://sqlite.org/2015/sqlite-dll-win32-x86-3081002.zip",
            Tuple.Create("sqlite3.dll", sqliteDllPath),
            Tuple.Create("sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win/native/x86/sqlite3.dll"));
        DownloadAndExtract(
            "https://sqlite.org/snapshot/sqlite-uap-201504202353.vsix",
            Tuple.Create("Redist/Retail/x86/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-x86/native/sqlite3.dll"),
            Tuple.Create("Redist/Retail/x64/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-x64/native/sqlite3.dll"),
            Tuple.Create("Redist/Retail/ARM/sqlite3.dll", "src/Microsoft.Data.Sqlite/runtimes/win10-arm/native/sqlite3.dll"));
    }

#nupkg-patch target='compile'
    @{
        var packagePaths = Files.Include("artifacts/build/**/Microsoft.Data.Sqlite.*.nupkg")
            .Exclude("**/*.symbols.nupkg");
        foreach (var packagePath in packagePaths)
        {
            using (var package = Package.Open(packagePath, FileMode.Open, FileAccess.ReadWrite))
            {
                CreatePartFromFile(
                    package,
                    sqliteDllPath,
                    @"runtimes/win-x86/native/sqlite3.dll");
                CreatePartFromFile(
                	package,
                	"src/Microsoft.Data.Sqlite/runtimes/win/native/x86/sqlite3ado.dll",
                	"runtimes/win/native/x86/sqlite3ado.dll");
                CreatePartFromFile(
                	package,
                	"src/Microsoft.Data.Sqlite/runtimes/win-x86/native/sqlite3ado.dll",
                	"runtimes/win-x86/native/sqlite3ado.dll");
                CreatePartFromFile(
                    package,
                    "src/Microsoft.Data.Sqlite/runtimes/win/native/x86/sqlite3.dll",
                    @"runtimes/win/native/x86/sqlite3.dll");
                CreatePartFromFile(
                    package,
                    "src/Microsoft.Data.Sqlite/runtimes/win10-x86/native/sqlite3.dll",
                    @"runtimes/win10-x86/native/sqlite3.dll");
                CreatePartFromFile(
                    package,
                    "src/Microsoft.Data.Sqlite/runtimes/win10-x64/native/sqlite3.dll",
                    @"runtimes/win10-x64/native/sqlite3.dll");
                CreatePartFromFile(
                    package,
                    "src/Microsoft.Data.Sqlite/runtimes/win10-arm/native/sqlite3.dll",
                    @"runtimes/win10-arm/native/sqlite3.dll");
            }
        }
    }

functions
    @{
        PackagePart CreatePartFromFile(
            Package destination,
            string sourceFileName,
            string partUriString)
        {
            var partUri = PackUriHelper.CreatePartUri(new Uri(partUriString, UriKind.Relative));
            var packagePart = destination.CreatePart(partUri, "application/octet", CompressionOption.Maximum);

            using (var sourceStream = File.OpenRead(sourceFileName))
            using (var stream = packagePart.GetStream())
            {
                sourceStream.CopyTo(stream);
            }

            return packagePart;
        }

        void DownloadAndExtract(
            string uri,
            params Tuple<string, string>[] files)
        {
            var tmpFile = "temp.zip";
            using (var webClient = new WebClient())
            {
                webClient.DownloadFile(uri, tmpFile);
            }
            using (var fileStream = new FileStream(tmpFile, FileMode.Open))
            using (var archive = new ZipArchive(fileStream))
            {
                foreach (var file in files)
                {
                    var entry = archive.GetEntry(file.Item1);
                    if (entry == null)
                        throw new FileNotFoundException("Could not find file '" + file.Item1 + "'.");

                    Directory.CreateDirectory(Path.GetDirectoryName(file.Item2));

                    using (var entryStream = entry.Open())
                    using (var dllStream = File.OpenWrite(file.Item2))
                    {
                        entryStream.CopyTo(dllStream);
                    }
                }
            }
            File.Delete(tmpFile);
        }
    }